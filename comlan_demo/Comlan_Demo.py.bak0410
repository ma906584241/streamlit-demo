import streamlit as st
import psycopg2
from datetime import datetime
import hashlib
import sys

print(f"Streamlit version: {st.__version__}")
# 数据库连接配置
DB_CONFIG = {
    "host": "c-cosmos-pg-comlan.yca6d4g7qznr6b.postgres.cosmos.azure.com",
    "port": 5432,
    "database": "citus",
    "user": "citus",
    "password": "!@#qwe123qwe"
}

# 初始化数据库
def init_db():
    conn = psycopg2.connect(**DB_CONFIG)
    cur = conn.cursor()
    
    # 创建用户表
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            password VARCHAR(256) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    cur.close()
    conn.close()

# 密码加密
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# 用户注册
def register_user(username, password):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        hashed_password = hash_password(password)
        cur.execute(
            "INSERT INTO users (username, password) VALUES (%s, %s)",
            (username, hashed_password)
        )
        
        conn.commit()
        cur.close()
        conn.close()
        return True
    except Exception as e:
        st.error(f"注册失败: {str(e)}")
        return False

# 用户登录验证
def verify_user(username, password):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        hashed_password = hash_password(password)
        cur.execute(
            "SELECT * FROM users WHERE username = %s AND password = %s",
            (username, hashed_password)
        )
        
        user = cur.fetchone()
        cur.close()
        conn.close()
        
        return user is not None
    except Exception as e:
        st.error(f"登录失败: {str(e)}")
        return False

# 主页面
def main():
    st.title("欢迎使用ComLan智能助手")
    
    # 初始化session state
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False

    # 如果未登录，显示登录/注册界面
    if not st.session_state.logged_in:
        tab1, tab2 = st.tabs(["登录", "注册"])
        
        with tab1:
            st.subheader("登录")
            login_username = st.text_input("用户名", key="login_username")
            login_password = st.text_input("密码", type="password", key="login_password")
            
            if st.button("登录"):
                if verify_user(login_username, login_password):
                    st.session_state.logged_in = True
                    st.success("登录成功！")
                    st.rerun()
                else:
                    st.error("用户名或密码错误！")
        
        with tab2:
            st.subheader("注册")
            reg_username = st.text_input("用户名", key="reg_username")
            reg_password = st.text_input("密码", type="password", key="reg_password")
            reg_password2 = st.text_input("确认密码", type="password", key="reg_password2")
            
            if st.button("注册"):
                if reg_password != reg_password2:
                    st.error("两次输入的密码不一致！")
                elif register_user(reg_username, reg_password):
                    st.success("注册成功！请返回登录页面进行登录。")
    
    # 如果已登录，显示Dify iframe
    else:
        # 在侧边栏添加应用选择
        with st.sidebar:
            st.title("应用选择")
            app_choice = st.radio(
                "请选择要使用的应用：",
                ["售后故障处理助手", "客户背调助手", "ChatBI"],
                key="app_choice"
            )
        
        # 根据选择显示不同的应用
        if app_choice == "售后故障处理助手":
            st.header("售后故障处理助手")
            st.markdown("""
             <div style="width: 100%; height: 700px; border: 1px solid #ccc; padding: 10px;">
                <iframe
                 src="http://192.168.88.101/chatbot/kfAW2hnbVLIaLZxo"
                 style="width: 100%; height: 100%; min-height: 700px"
                 frameborder="0"
                 allow="microphone">
                </iframe>
            </div>
            """, unsafe_allow_html=True)
        elif app_choice == "客户背调助手":
            st.header("客户背调助手")
            st.markdown("""
            <div style="width: 100%; height: 700px; border: 1px solid #ccc; padding: 10px;">
                <iframe
                    <iframe
                     src="http://172.200.234.13/chatbot/vzicKhGMKHV5cPLG"
                     style="width: 100%; height: 100%; min-height: 700px"
                     frameborder="0"
                     allow="microphone">
                </iframe>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.header("ChatBI")
            st.markdown("""
            <div style="width: 100%; height: 700px; border: 1px solid #ccc; padding: 10px;">
                <iframe
                    src="http://172.200.234.13/chatbot/uXArlDP7jccKB5KX"
                    style="width: 100%; height: 100%;"
                    frameborder="0"
                    allow="microphone"
                    sandbox="allow-same-origin allow-scripts allow-popups allow-forms">
                </iframe>
            </div>
            """, unsafe_allow_html=True)
            
        # 添加样式
        st.markdown("""
        <style>
            iframe {
                background: white;
            }
            .stRadio > label {
                font-weight: bold;
                color: #0066cc;
            }
        </style>
        """, unsafe_allow_html=True)
        
        if st.button("退出登录"):
            st.session_state.logged_in = False
            st.rerun()

if __name__ == "__main__":
    init_db()
    main() 